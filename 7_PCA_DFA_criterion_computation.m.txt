% Copyright, M.Bencsik, M.Bisele L.D.Hughes, 2023

clear
close all
path(path,'D:\Liam Passport\Study 1 Data\Useful_Matlab_Functions');

% This code applies PCA and DFA to the high density TDB from the previous code, taking on the TDB stating times for the individual in question.
% Here parameters such as sampling rate, feature lenght, overlapping factor and temporal resolution are inputted. 
% The code also computes a ratio calculation of the standard deviation of the indivisdual DF clusters and the distance of each cluster centroid, 
% quantifying the success of each discrimination. 

folder_names = ['01';'02';'03';'04';'05';'06';'07';'08';'09';'10';'11';'12';'13';'14';'15';'16';'17';'18';'19';'20';'21';'22';'23';'24';'25';'26';'27';'28';'29';;'30';'31';'32';'33';'34';'35']
for Individual_No = 1:size(folder_names,1)
    starting_times = csvread(['D:\Liam Passport\Study 1 Data\P0',folder_names(Individual_No,:),'\TDB_starting_times.csv']);
    No_points_TDB(1,Individual_No) = size(starting_times,2);
end

tr_counter = 1;
temporal_resolution = 0.3;
feature_length = 3;
multiplication_factor = 2
    
    for I_index = 1:size(folder_names,1)
        
        Individual_No = folder_names(I_index,:);
        
        for Sensor_No = 1:5
            
            
            load(['D:\Liam Passport\Study 1 Data\processing_code\training_data_bases\high_density\high_density_TDB_',Individual_No,'_explore_criterion_','.mat'])
            eval(['TDB_',num2str(Sensor_No),' = TDB_',num2str(Sensor_No),''';'])
            eval(['validation_data = TDB_',num2str(Sensor_No),';'])
            eval(['temp2 = mean(TDB_',num2str(Sensor_No),');'])
            eval(['centred_data_set2 = (TDB_',num2str(Sensor_No),' - ones(size(TDB_',num2str(Sensor_No),',1),1)*temp2)'';'])
            
            % Calculate the PCA scores and eigenvectors:
            L = centred_data_set2*centred_data_set2'; % L is the covariance matrix C=A*A'.
            [V D] = eig(L); % Diagonal elements of D are the eigenvalues for both L=A'*A and C=A*A'.
            
            scores = flipud(V'*centred_data_set2);
            A_x = sum((validation_data).*(ones(size(validation_data,1),1)*DFA_spectrum_01),2);
            A_y = sum((validation_data).*(ones(size(validation_data,1),1)*DFA_spectrum_02),2);
            
            % Calculate the centriod of each activity
            centre_01(1) = mean(A_x(1:boundary(1)));
            centre_02(1) = mean(A_x(boundary(1)+1:boundary(2)));
            centre_03(1) = mean(A_x(boundary(2)+1:end));
            
            centre_01(2) = mean(A_y(1:boundary(1)));
            centre_02(2) = mean(A_y(boundary(1)+1:boundary(2)));
            centre_03(2) = mean(A_y(boundary(2)+1:end));            

            % Calculate the distances between the three activity centroids
            dist_1_2 = sqrt((centre_01(1)-centre_02(1)).^2+(centre_01(2)-centre_02(2)).^2);
            dist_1_3 = sqrt((centre_01(1)-centre_03(1)).^2+(centre_01(2)-centre_03(2)).^2);
            dist_2_3 = sqrt((centre_02(1)-centre_03(1)).^2+(centre_02(2)-centre_03(2)).^2);
            
            dist_1_2_x = sqrt((centre_01(1)-centre_02(1)).^2);
            dist_1_3_x = sqrt((centre_01(1)-centre_03(1)).^2);
            dist_2_3_x = sqrt((centre_02(1)-centre_03(1)).^2);
            
            dist_1_2_y = sqrt((centre_01(2)-centre_02(2)).^2);
            dist_1_3_y = sqrt((centre_01(2)-centre_03(2)).^2);
            dist_2_3_y = sqrt((centre_02(2)-centre_03(2)).^2);
            
            array_01 = sqrt((centre_01(1)- A_x(1:boundary(1))).^2+(centre_01(2)- A_y(1:boundary(1))).^2);
            array_02 = sqrt((centre_02(1)- A_x(boundary(1)+1:boundary(2))).^2+(centre_02(2)- A_y(boundary(1)+1:boundary(2))).^2);
            array_03 = sqrt((centre_03(1)- A_x(boundary(2)+1:end)).^2+(centre_03(2)- A_y(boundary(2)+1:end)).^2);
            
            
            array_01_x = sqrt((centre_01(1)- A_x(1:boundary(1))).^2);
            array_02_x = sqrt((centre_02(1)- A_x(boundary(1)+1:boundary(2))).^2);
            array_03_x = sqrt((centre_03(1)- A_x(boundary(2)+1:end)).^2);
            
            array_01_y = sqrt((centre_01(2)- A_y(1:boundary(1))).^2);
            array_02_y = sqrt((centre_02(2)- A_y(boundary(1)+1:boundary(2))).^2);
            array_03_y = sqrt((centre_03(2)- A_y(boundary(2)+1:end)).^2);
            
            scatter_01 = std(array_01);
            scatter_02 = std(array_02);
            scatter_03 = std(array_03);
            
            scatter_01_x = std(array_01_x);
            scatter_02_x = std(array_02_x);
            scatter_03_x = std(array_03_x);
            
            scatter_01_y = std(array_01_y);
            scatter_02_y = std(array_02_y);
            scatter_03_y = std(array_03_y);

           % updated criterion calculation
            criterion(str2num(Individual_No),Sensor_No,tr_counter) = (dist_1_2*dist_1_3*dist_2_3)/(scatter_01*scatter_02*scatter_03);   
            criterion_x(str2num(Individual_No),Sensor_No,tr_counter) = (dist_1_2_x*dist_1_3_x*dist_2_3_x)/(scatter_01_x*scatter_02_x*scatter_03_x);  
            criterion_y(str2num(Individual_No),Sensor_No,tr_counter) = (dist_1_2_y*dist_1_3_y*dist_2_3_y)/(scatter_01_y*scatter_02_y*scatter_03_y);
            %original criterion

            clf
            figure(1)
            graph_DF_scores(scores,[A_x A_y],Sensor_No,Individual_No,boundary)
            %title(['Sensor = ',num2str(Sensor_No)',' Individual = ', num2str(Individual_No) 'discrimination criterion = ',num2str(criterion(str2num(Individual_No),Sensor_No)),'Temp Res = ',num2str(temporal_resolution)])
            title([' Individual = ', num2str(Individual_No) ' Sensor = ',num2str(Sensor_No),' Explore Criterion ',' Criterion = ',num2str(criterion(str2num(Individual_No),Sensor_No,tr_counter))])   
            print(['D:\Liam Passport\Study 1 Data\processing_code\explore_criterion\Scatter plots new criterion not normalised\Ind_',num2str(Individual_No),'_Sensor_',num2str(Sensor_No),'_explore_criterion_','.tif'],'-dtiff','-r300')
            pause(0.01)

        end
    end
    tr_counter = tr_counter + 1;

save('updated_not_normalised_two_criteria.mat','criterion','criterion_x')
